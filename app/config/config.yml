imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: services.yml }

# Put parameters here that don't need to change on each machine where the app is deployed
# http://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: en

framework:
    #esi:             ~
    translator:      { fallbacks: ["%locale%"] }
    secret:          "%secret%"
    router:
        resource: "%kernel.root_dir%/config/routing.yml"
        strict_requirements: ~
    form:            ~
    csrf_protection: ~
    validation:      { enable_annotations: true }
    #serializer:      { enable_annotations: true }
    templating:
        engines: ['twig']
        #assets_version: SomeVersionScheme
    default_locale:  ru
    trusted_hosts:   ~
    trusted_proxies: ~
    session:
        # handler_id set to null will use default session handler from php.ini
        handler_id:  ~
    fragments:       ~
    http_method_override: true

# Twig Configuration
twig:
    debug:            "%kernel.debug%"
    strict_variables: "%kernel.debug%"

# Assetic Configuration
assetic:
    debug:          "%kernel.debug%"
    use_controller: false
    bundles:        [ ]
    #java: /usr/bin/java
    filters:
        cssrewrite: ~
        #closure:
        #    jar: "%kernel.root_dir%/Resources/java/compiler.jar"
        #yui_css:
        #    jar: "%kernel.root_dir%/Resources/java/yuicompressor-2.4.7.jar"

# Doctrine Configuration
doctrine:
    dbal:
        driver:   pdo_mysql
        host:     "%database_host%"
        port:     "%database_port%"
        dbname:   "%database_name%"
        user:     "%database_user%"
        password: "%database_password%"
        charset:  UTF8
        types:
            json: Sonata\Doctrine\Types\JsonType
        # if using pdo_sqlite as your database driver:
        #   1. add the path in parameters.yml
        #     e.g. database_path: "%kernel.root_dir%/data/data.db3"
        #   2. Uncomment database_path in parameters.yml.dist
        #   3. Uncomment next line:
        #     path:     "%database_path%"

    orm:
        auto_generate_proxy_classes: "%kernel.debug%"
#        naming_strategy: doctrine.orm.naming_strategy.underscore
        auto_mapping: true
        
#        entity_managers:
#            default:
#                mappings:
#                    SonataMediaBundle: ~
                    
    dbal:
        types:
            json: Sonata\Doctrine\Types\JsonType
            
#doctrine_phpcr:
#    odm:
#        auto_mapping: true
#        mappings:
#            SonataMediaBundle:
#                prefix: Sonata\MediaBundle\PHPCR

knp_paginator:
    page_range: 5                      # default page range used in pagination control
    default_options:
        page_name: page                # page query parameter name
        sort_field_name: sort          # sort field query parameter name
        sort_direction_name: direction # sort direction query parameter name
        distinct: true                 # ensure distinct results, useful when ORM queries are using GROUP BY statements
    template:
        pagination: KnpPaginatorBundle:Pagination:sliding.html.twig     # sliding pagination controls template
        sortable: KnpPaginatorBundle:Pagination:sortable_link.html.twig # sort link template

#FOR SONATA MEDIA                
sonata_media:
    # if you don't use default namespace configuration
    #class:
    #    media: MyVendor\MediaBundle\Entity\Media
    #    gallery: MyVendor\MediaBundle\Entity\Gallery
    #    gallery_has_media: MyVendor\MediaBundle\Entity\GalleryHasMedia
    default_context: default
    db_driver: doctrine_orm # or doctrine_mongodb, doctrine_phpcr
    contexts:
        default:  # the default context is mandatory
            providers:
                - sonata.media.provider.dailymotion
                - sonata.media.provider.youtube
                - sonata.media.provider.image
                - sonata.media.provider.file

            formats:
                small: { width: 150 , quality: 80}
                big:   { width: 500 , quality: 70}
                preview:   { width: 195, quality: 70}

    cdn:
        server:
            path: /uploads/media # http://media.sonata-project.org/

    filesystem:
        local:
            directory:  %kernel.root_dir%/../web/uploads/media
            create:     false
            
    providers:
        image:
            resizer: sonata.media.resizer.square
            allowed_mime_types:
              - image/gif
              - image/jpeg
              - image/png
              
        file:
            allowed_mime_types:
              - video/x-ms-asf
              - application/octet-stream
              - text/plain
              - video/mp4
            allowed_extensions:
              - gif
              - png
              - jpeg
              - jpg
              - wmv
              - mp3
              - txt
              - mp4
              
        youtube:
            service:    sonata.media.provider.youtube
            resizer:    sonata.media.resizer.simple
            filesystem: sonata.media.filesystem.local
            cdn:        sonata.media.cdn.server
            generator:  sonata.media.generator.default
            thumbnail:  sonata.media.thumbnail.format
            html5: false
#FOR SONATA MEDIA


#        entity_managers:
#            default:
#                mappings:
#                    ApplicationSonataUserBundle: ~
#                    SonataUserBundle: ~
#                    FOSUserBundle: ~ 
#                    AppProjectBundle:
#                        type:      ~
#                        dir:       "Entity"
#                        prefix:    "AppProjectBundle\Entity"
#                        is_bundle: ~

# Swiftmailer Configuration
swiftmailer:
    transport: "%mailer_transport%"
    host:      "%mailer_host%"
    username:  "%mailer_user%"
    password:  "%mailer_password%"
    spool:     { type: memory }
            
##FOR SONATA ADMIN
#sonata_block:
#    default_contexts: [cms]
#    blocks:
#        # Enable the SonataAdminBundle block
#        sonata.admin.block.admin_list:
#        sonata.user.block.menu:    # used to display the menu in profile pages
#        sonata.block.service.text:
#            contexts:   [admin]
##END FOR SONATA ADMIN

##FOR SONATA USER
#fos_user:
#    db_driver:      orm # can be orm or odm
#    firewall_name:  secure_area
#    user_class:     Application\Sonata\UserBundle\Entity\User
#    registration:
#        confirmation:
#            enabled:    true # change to true for required email confirmation
#
#    group:
#        group_class:   Application\Sonata\UserBundle\Entity\Group
#        group_manager: sonata.user.orm.group_manager
#
#    service:
#        user_manager: sonata.user.orm.user_manager
##END FOR SONATA USER

sonata_user:
    security_acl: true
    manager_type: orm # can be orm or mongodb

sonata_block:
    default_contexts: [cms]
    blocks:
        #...
        sonata.user.block.menu:    # used to display the menu in profile pages
        sonata.user.block.account: # used to display menu option (login option)
        sonata.block.service.text: # used to if you plan to use Sonata user routes
        sonata.admin.block.admin_list:
            contexts:   [admin]

# app/config/security.yml
security:
    # [...]
    acl:
        connection: default
  
#FOS
fos_user:
    db_driver:      orm # can be orm or odm
    firewall_name:  main
    user_class:     App\ProjectBundle\Entity\User 
    #Application\Sonata\UserBundle\Entity\User


    group:
        group_class:   Sonata\UserBundle\Entity\BaseGroup
        group_manager: sonata.user.orm.group_manager  
    
    service:
        user_manager: sonata.user.orm.user_manager 